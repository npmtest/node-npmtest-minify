{"/home/travis/build/npmtest/node-npmtest-minify/test.js":"/* istanbul instrument in package npmtest_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minify/lib.npmtest_minify.js":"/* istanbul instrument in package npmtest_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_minify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_minify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-minify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-minify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_minify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_minify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_minify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_minify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_minify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_minify.__dirname + '/lib.npmtest_minify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/lib/minify.js":"'use strict';\n\nvar DIR         = __dirname + '/',\n    \n    fs          = require('fs'),\n    path        = require('path'),\n    exec        = require('execon'),\n    tomas       = require('tomas'),\n    rendy       = require('rendy'),\n    \n    log         = require('debug')('minify');\n    \n    ['js', 'html', 'css', 'img'].forEach(function(name) {\n        minify[name] = require(DIR + name);\n    });\n\nmodule.exports  = minify;\n\nfunction check(name, callback) {\n    if (!name)\n        throw Error('name could not be empty!');\n    \n    if (typeof callback !== 'function')\n        throw Error('callback should be function!');\n}\n\nfunction minify(name, options, callback) {\n    var ret, ext, is,\n        ERROR_MSG   = 'File type \"{{ ext }}\" not supported.',\n        EXT         = ['js', 'html', 'css'];\n    \n    if (!callback)\n        callback = options;\n    \n    check(name, callback);\n    \n    ext         = path.extname(name).slice(1);\n    is          = ~EXT.indexOf(ext);\n    \n    if (!is)\n        callback(Error(rendy(ERROR_MSG, {\n            ext: ext\n        })));\n    else\n        tomas.check(name, function(is) {\n            exec.if(is, function() {\n                tomas.read(name, options, callback);\n            }, function(fn) {\n                log('optimizing ' + path.basename(name));\n                optimize(name, function(error) {\n                    !error ? fn() : callback(error);\n                });\n            });\n        });\n    \n    return ret;\n}\n\n/**\n * function minificate js,css and html files\n *\n * @param files     -   js, css or html file path\n * @param options   -   object contain main options\n */\nfunction optimize(file, callback) {\n    var name, isObj;\n    \n    check(file, callback);\n    \n    isObj = typeof file === 'object';\n    \n    if (isObj)\n        name    = Object.keys(file)[0];\n    else\n        name    = file;\n    \n    log('reading file ' + path.basename(name));\n    \n    fs.readFile(name, 'utf8', function(error, data) {\n        if (error)\n            callback(error);\n        else\n            onDataRead(file, data, callback);\n    });\n}\n\n/**\n* Processing of files\n* @param fileData {name, data}\n*/\nfunction onDataRead(filename, data, callback) {\n    var ext,\n        readFilesCount  = 0;\n    \n    log('file ' + path.basename(filename) + ' read');\n    \n    ext = path.extname(filename).replace(/^\\./, '');\n    \n    minify[ext](data, function(error, data) {\n        if (error)\n            callback(error);\n        else\n            exec.if(ext !== 'css', function(error, optimizedData) {\n                var isStr   = typeof optimizedData === 'string';\n                \n                if (isStr)\n                    data    = optimizedData;\n                \n                ++readFilesCount;\n                log('writing ' + filename);\n                tomas.write(filename, data, callback);\n            }, function(callback) {\n                minify.img(filename, data, callback);\n            });\n        });\n}\n\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/lib/js.js":"/* сжимаем код через uglify-js */\n\n(function() {\n    'use strict';\n    \n    var uglify      = require('uglify-js'),\n        \n        assert      = require('assert'),\n        tryCatch    = require('try-catch'),\n        \n        ErrorMsg    = Error([\n            'can\\'t load uglify-js',\n            'npm install uglify-js',\n            'https://github.com/mishoo/UglifyJS2'].join('\\n'));\n    \n    /**\n     * minify js data.\n     *\n     * @param data\n     */\n    module.exports = function(data, callback) {\n        var error, dataOptimized;\n        \n        assert(data);\n        assert(callback);\n        \n        if (!uglify)\n            error = ErrorMsg;\n        else\n            error = tryCatch(function() {\n                dataOptimized = uglify.minify(data, {fromString: true}).code;\n            });\n        \n        callback(error, dataOptimized);\n    };\n\n})();\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/lib/html.js":"/* сжимаем код через htmlMinify */\n\n(function() {\n    'use strict';\n    \n    var assert      = require('assert'),\n        tryCatch    = require('try-catch'),\n        Minifier    = require('html-minifier'),\n        \n        ErrorMsg    = Error([\n            'can\\'t load html-minifier',\n            'npm install html-minifier',\n            'https://github.com/kangax/html-minifier'].join('\\n')),\n        \n        Options     = {\n            removeComments:                 true,\n            removeCommentsFromCDATA:        true,\n            removeCDATASectionsFromCDATA:   true,\n            collapseWhitespace:             true,\n            collapseBooleanAttributes:      true,\n            removeAttributeQuotes:          true,\n            removeRedundantAttributes:      true,\n            useShortDoctype:                true,\n            removeEmptyAttributes:          true,\n            /* оставляем, поскольку у нас\n             * в элемент fm генерируеться\n             * таблица файлов\n             */\n            removeEmptyElements:            false,\n            removeOptionalTags:             true,\n            removeScriptTypeAttributes:     true,\n            removeStyleLinkTypeAttributes:  true,\n            \n            minifyJS:                       true,\n            minifyCSS:                      true\n        };\n    \n    /**\n     * minify html data.\n     *\n     * @param data\n     * @param callback\n     */\n    module.exports = function(data, callback) {\n        var error;\n        \n        assert(data);\n        assert(callback);\n        \n        if (!Minifier)\n            error   = ErrorMsg;\n        else\n            error   = tryCatch(function() {\n                data = Minifier.minify(data, Options);\n            });\n        \n        callback(error, data);\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/lib/css.js":"/* сжимаем код через clean-css */\n(function() {\n    'use strict';\n    \n    var assert      = require('assert'),\n        tryCatch    = require('try-catch'),\n        Clean       = require('clean-css'),\n        \n        ErrorMsg    = Error([\n            'can\\'t load clean-css',\n            'npm install clean-css',\n            'https://github.com/GoalSmashers/clean-css'].join('\\n'));\n    \n    /**\n     * minify css data.\n     *\n     * @param data\n     * @param callback\n     */\n    module.exports = function(data, callback) {\n        var error, errorParse, dataOptimized;\n        \n        assert(data);\n        assert(callback);\n        \n        if (!Clean)\n            error   = ErrorMsg;\n        else\n            error   = tryCatch(function() {\n                var min         = new Clean().minify(data);\n                dataOptimized   = min.styles;\n                errorParse      = min.errors[0];\n            });\n        \n        callback(error || errorParse, dataOptimized);\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/lib/img.js":"(function() {\n    'use strict';\n    \n    var path        = require('path'),\n        \n        assert      = require('assert'),\n        B64img      = require('css-b64-images'),\n        \n        ONE_KB      = Math.pow(2, 10),\n        MAX_SIZE    = 100 * ONE_KB,\n        OPTIONS     = {\n            maxSize: MAX_SIZE\n        },\n        \n        ErrorMsg    = Error([\n            'can\\'t load css-b64-images',\n            'npm install css-b64-images',\n            'https://github.com/Filirom1/css-base64-images'].join('\\n'));\n    \n    /**\n     * minify css data.\n     * if can not minify return data\n     *\n     * @param name\n     * @param data\n     * @param callback\n     */\n    module.exports = function(name, data, callback) {\n        var dir         = path.dirname(name),\n            dirRelative = dir + '/../';\n        \n        assert(name);\n        assert(data);\n        assert(callback);\n        \n        if (!B64img)\n            callback(ErrorMsg);\n        else\n            B64img.fromString(data, dir, dirRelative, OPTIONS, function(error, css) {\n                callback(null, css);\n            });\n    };\n})();\n","/home/travis/build/npmtest/node-npmtest-minify/node_modules/minify/bin/minify.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar exec        = require('execon'),\n    Pack        = require('../package.json'),\n    Version     = Pack.version,\n    \n    log         = function() {\n        console.log.apply(console, arguments);\n        process.stdin.pause();\n    },\n    \n    Argv        = process.argv,\n    files       = Argv.slice(2),\n    In          = files[0];\n    \n    log.error   = function() {\n        console.error.apply(console, arguments);\n        process.stdin.pause();\n    };\n\nprocess.on('uncaughtException', function(error) {\n    if (error.code !== 'EPIPE')\n        log(error.message);\n});\n\nminify();\n\nfunction readStd(callback) {\n    var stdin   = process.stdin,\n        chunks  = '',\n        read    = function() {\n            var chunk = stdin.read();\n            \n            if (chunk) {\n                chunks += chunk;\n            } else {\n                stdin.removeListener('readable', read);\n                callback(chunks);\n            }\n        };\n    \n    stdin.setEncoding('utf8');\n    stdin.addListener('readable', read);\n}\n\nfunction minify() {\n    if (!In || /^(-h|--help)$/.test(In))\n        help();\n    \n    else if (/^--(js|css|html)$/.test(In))\n        readStd(processStream);\n    \n    else if (/^(-v|--version)$/.test(In))\n        log('v' + Version);\n    \n    else\n        uglifyFiles(files);\n}\n\nfunction processStream(chunks) {\n    var name,\n        minify = require('..');\n    \n    if (chunks && In) {\n        name = In.replace('--', '');\n        \n        minify[name](chunks, function(error, data) {\n            if (error)\n                log.error(error.message);\n            else\n                log(data);\n        });\n    }\n}\n\nfunction uglifyFiles(files) {\n    var funcs = files.map(function(current) {\n        var minify = require('..');\n        \n        return minify.bind(null, current);\n    });\n    \n    exec.parallel(funcs, function(error) {\n        var args = [].slice.call(arguments, 1);\n        \n        if (error)\n            log.error(error.message);\n        else\n            log.apply(null, args);\n    });\n}\n\nfunction help() {\n    var bin         = require('../json/help'),\n        usage       = 'Usage: minify [options]';\n    \n    console.log(usage);\n    console.log('Options:');\n    \n    Object.keys(bin).forEach(function(name) {\n        console.log('  %s %s', name, bin[name]);\n    });\n}\n\n"}